import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer


def calculate_metrics(y_true, y_pred, y_pred_proba):
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred)
    recall = recall_score(y_true, y_pred)
    f1 = f1_score(y_true, y_pred)
    cm = confusion_matrix(y_true, y_pred)
    tp = cm[1, 1]
    fp = cm[0, 1]
    tn = cm[0, 0]
    fn = cm[1, 0]
    ppv = tp / (tp + fp) if (tp + fp) > 0 else 0
    npv = tn / (tn + fn) if (tn + fn) > 0 else 0
    auc = roc_auc_score(y_true, y_pred_proba)
    return [accuracy, precision, recall, f1, npv, ppv, auc]


try:
    df = pd.read_excel("test1.xlsx")
    df.columns = df.columns.str.strip()
    print(df.columns)
    columns_to_select = ['视网膜病变', 'DM病程', '糖化', 'eGFR', '血肌酐', 'TC', '24h尿蛋白定量', '空腹血糖', 'BMI', '年龄', '收缩压', 'LDL', 'TG', '尿ACR', '舒张压', 'HDL', '餐后血糖', 'DN病程', '性别']
    X = df[columns_to_select]
    y = df['病理分型']

    label_encoders = {}
    for col in X.columns:
        if X[col].dtype == 'object':
            le = LabelEncoder()
            X[col] = le.fit_transform(X[col])
            label_encoders[col] = le

    imputer = SimpleImputer(strategy='mean')
    X = imputer.fit_transform(X)


    models = []
    internal_results = []
    for i in range(15):
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=i)
        model = LogisticRegression(random_state=42, solver='liblinear')
        model.fit(X_train, y_train)
        models.append(model)

        y_pred = model.predict(X_test)
        y_pred_proba = model.predict_proba(X_test)[:, 1]
        metrics = calculate_metrics(y_test, y_pred, y_pred_proba)
        internal_results.append(metrics)


        y_pred = model.predict(X_test)
        y_pred_proba = model.predict_proba(X_test)[:, 1]
        metrics = calculate_metrics(y_test, y_pred, y_pred_proba)
        internal_results.append(metrics)
    internal_results = np.array(internal_results)
    internal_means = internal_results.mean(axis=0)
    internal_stds = internal_results.std(axis=0)
    internal_sems = internal_stds / np.sqrt(len(internal_results))

    internal_summary = pd.DataFrame({
        '统计指标': ['MEAN', 'SEM'],
        '准确率': [internal_means[0], internal_sems[0]],
        '精确率': [internal_means[1], internal_sems[1]],
        '召回率': [internal_means[2], internal_sems[2]],
        'F1分数': [internal_means[3], internal_sems[3]],
        '阴性预测值': [internal_means[4], internal_sems[4]],
        '阳性预测值': [internal_means[5], internal_sems[5]],
        'AUC': [internal_means[6], internal_sems[6]]
    })
    internal_summary = internal_summary.set_index('统计指标').T.reset_index().rename(columns={'index': '指标'})

    external_df = pd.read_excel("验证队列.xlsx")
    external_df.columns = external_df.columns.str.strip()
    X_external = external_df[columns_to_select]
    y_external = external_df['病理分型']

    for col, le in label_encoders.items():
        if col in X_external.columns:
            X_external[col] = le.transform(X_external[col])

    X_external = imputer.transform(X_external)

    external_results = []
    for model in models:
        y_pred_external = model.predict(X_external)
        y_pred_proba_external = model.predict_proba(X_external)[:, 1]
        metrics_external = calculate_metrics(y_external, y_pred_external, y_pred_proba_external)
        external_results.append(metrics_external)
    external_results = np.array(external_results)
    external_means = external_results.mean(axis=0)
    external_stds = external_results.std(axis=0)
    external_sems = external_stds / np.sqrt(len(external_results))

    external_summary = pd.DataFrame({
        '统计指标': ['MEAN', 'SEM'],
        '准确率': [external_means[0], external_sems[0]],
        '精确率': [external_means[1], external_sems[1]],
        '召回率': [external_means[2], external_sems[2]],
        'F1分数': [external_means[3], external_sems[3]],
        '阴性预测值': [external_means[4], external_sems[4]],
        '阳性预测值': [external_means[5], external_sems[5]],
        'AUC': [external_means[6], external_sems[6]]
    })
    external_summary = external_summary.set_index('统计指标').T.reset_index().rename(columns={'index': '指标'})

    internal_results_df = pd.DataFrame(internal_results, columns=['准确率', '精确率', '召回率', 'F1分数', '阴性预测值', '阳性预测值', 'AUC'])
    external_results_df = pd.DataFrame(external_results, columns=['准确率', '精确率', '召回率', 'F1分数', '阴性预测值', '阳性预测值', 'AUC'])

    with pd.ExcelWriter('Logistic-全部指标.xlsx') as writer:
        internal_results_df.to_excel(writer, sheet_name='内部每次循环结果', index=False)
        internal_summary.to_excel(writer, sheet_name='内部统计结果', index=False)
        external_results_df.to_excel(writer, sheet_name='外部每次循环结果', index=False)
        external_summary.to_excel(writer, sheet_name='外部统计结果', index=False)

    print("模型评估结果、统计数据以及外部验证队列结果已保存到 Logistic-全部指标.xlsx 文件中。")

except FileNotFoundError:
    print("未找到 test1.xlsx 或 验证队列.xlsx 文件，请检查文件路径。")
except Exception as e:
    print(f"发生错误: {e}")