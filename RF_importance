import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体字体
mpl.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题
file_path = 'test1.xlsx'
data = pd.read_excel(file_path)
numeric_cols = data.select_dtypes(include=['number']).columns
categorical_cols = data.select_dtypes(include=['object']).columns

data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].mean())
for col in categorical_cols:
    data[col] = data[col].fillna(data[col].mode()[0])

X = data.drop('病理分型', axis=1)
y = data['病理分型']

for col in categorical_cols.drop('病理分型', errors='ignore'):
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col])
le_y = LabelEncoder()
y = le_y.fit_transform(y)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
from sklearn.metrics import accuracy_score
y_pred = rf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"随机森林模型的准确率: {accuracy:.2f}")
feature_importances = pd.Series(rf.feature_importances_, index=X.columns)
feature_importances = feature_importances.sort_values(ascending=False)
total_importance = feature_importances.sum()
importance_percentage = feature_importances / total_importance
print("随机森林特征重要性排名及占比:")
print(importance_percentage)
plt.figure(figsize=(10, 6))
importance_percentage.plot(kind='bar')
plt.title('随机森林特征重要性占比')
plt.xlabel('特征')
plt.ylabel('重要性占比')
plt.savefig('feature_importance_plot.png', dpi=300)
plt.show()
output_df = pd.DataFrame({
    '特征': importance_percentage.index,
    '重要性占比': importance_percentage.values
})
output_df.to_excel('RF_feature_importance.xlsx', index=False)