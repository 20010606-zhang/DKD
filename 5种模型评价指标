import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import roc_curve, auc, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

train_file_path = 'test1.xlsx'
train_data = pd.read_excel(train_file_path)

validation_file_path = '验证队列.xlsx'
validation_data = pd.read_excel(validation_file_path)

feature_columns = ['视网膜病变', 'DM病程', '糖化', 'eGFR', '血肌酐', 'TC', '24h尿蛋白定量', '空腹血糖', 'BMI', '年龄', '收缩压', 'LDL']
target_column = '病理分型'

X_train_all = train_data[feature_columns].values
y_train_all = train_data[target_column].values

X_validation = validation_data[feature_columns].values
y_validation = validation_data[target_column].values

imputer = SimpleImputer(strategy='mean')
X_train_all = imputer.fit_transform(X_train_all)
X_validation = imputer.transform(X_validation)

models = [
    RandomForestClassifier(random_state=42),
    GradientBoostingClassifier(random_state=42),
    LogisticRegression(random_state=42, solver='liblinear', max_iter=1000),
    SVC(random_state=42, probability=True),
    DecisionTreeClassifier(random_state=42)
]

model_names = ['RF', 'GBM', 'LR', 'SVM', 'Decision Tree']

n_iterations = 15

train_metrics = {name: {'AUC': [], 'Sensitivity': [], 'Specificity': [], 'Accuracy': [], 'Precision': [], 'Recall': [], 'F1': []} for name in model_names}
val_metrics = {name: {'AUC': [], 'Sensitivity': [], 'Specificity': [], 'Accuracy': [], 'Precision': [], 'Recall': [], 'F1': []} for name in model_names}

for _ in range(n_iterations):
    X_train, X_test, y_train, y_test = train_test_split(X_train_all, y_train_all, test_size=0.2, random_state=None)

    for model, name in zip(models, model_names):
        model.fit(X_train, y_train)

        y_pred_proba_test = model.predict_proba(X_test)[:, 1]
        fpr_test, tpr_test, thresholds_test = roc_curve(y_test, y_pred_proba_test)
        roc_auc_test = auc(fpr_test, tpr_test)
        y_pred_test = model.predict(X_test)
        tn, fp, fn, tp = confusion_matrix(y_test, y_pred_test).ravel()
        sensitivity_test = tp / (tp + fn)
        specificity_test = tn / (tn + fp)
        accuracy_test = accuracy_score(y_test, y_pred_test)
        precision_test = precision_score(y_test, y_pred_test)
        recall_test = recall_score(y_test, y_pred_test)
        f1_test = f1_score(y_test, y_pred_test)

        train_metrics[name]['AUC'].append(roc_auc_test)
        train_metrics[name]['Sensitivity'].append(sensitivity_test)
        train_metrics[name]['Specificity'].append(specificity_test)
        train_metrics[name]['Accuracy'].append(accuracy_test)
        train_metrics[name]['Precision'].append(precision_test)
        train_metrics[name]['Recall'].append(recall_test)
        train_metrics[name]['F1'].append(f1_test)

        y_pred_proba_val = model.predict_proba(X_validation)[:, 1]
        fpr_val, tpr_val, thresholds_val = roc_curve(y_validation, y_pred_proba_val)
        roc_auc_val = auc(fpr_val, tpr_val)
        y_pred_val = model.predict(X_validation)
        tn, fp, fn, tp = confusion_matrix(y_validation, y_pred_val).ravel()
        sensitivity_val = tp / (tp + fn)
        specificity_val = tn / (tn + fp)
        accuracy_val = accuracy_score(y_validation, y_pred_val)
        precision_val = precision_score(y_validation, y_pred_val)
        recall_val = recall_score(y_validation, y_pred_val)
        f1_val = f1_score(y_validation, y_pred_val)

        val_metrics[name]['AUC'].append(roc_auc_val)
        val_metrics[name]['Sensitivity'].append(sensitivity_val)
        val_metrics[name]['Specificity'].append(specificity_val)
        val_metrics[name]['Accuracy'].append(accuracy_val)
        val_metrics[name]['Precision'].append(precision_val)
        val_metrics[name]['Recall'].append(recall_val)
        val_metrics[name]['F1'].append(f1_val)

train_metrics_mean = {name: {metric: np.mean(values) for metric, values in metrics.items()} for name, metrics in train_metrics.items()}
train_metrics_std = {name: {metric: np.std(values) for metric, values in metrics.items()} for name, metrics in train_metrics.items()}

val_metrics_mean = {name: {metric: np.mean(values) for metric, values in metrics.items()} for name, metrics in val_metrics.items()}
val_metrics_std = {name: {metric: np.std(values) for metric, values in metrics.items()} for name, metrics in val_metrics.items()}

train_mean_df = pd.DataFrame(train_metrics_mean).T
train_std_df = pd.DataFrame(train_metrics_std).T
val_mean_df = pd.DataFrame(val_metrics_mean).T
val_std_df = pd.DataFrame(val_metrics_std).T

train_mean_df = train_mean_df.add_suffix('_Mean_Train')
train_std_df = train_std_df.add_suffix('_Std_Train')
val_mean_df = val_mean_df.add_suffix('_Mean_Val')
val_std_df = val_std_df.add_suffix('_Std_Val')

result_df = pd.concat([train_mean_df, train_std_df, val_mean_df, val_std_df], axis=1)

result_df.to_excel('model_metrics2.xlsx')